#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ç–µ–π –∏–∑ /content/keywords.csv.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–æ–∑–¥–∞—ë—Ç /articles/<slug>.html –ø–æ –Ω–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
—Å –º–µ—Ç—Ä–∏–∫–æ–π, OG, JSON-LD –∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–∞—Ç <!--DAILY_*-->.
–ö–æ–Ω—Ç–µ–Ω—Ç –ø–∏—à–µ—Ç LLM —á–µ—Ä–µ–∑ OpenAI API.
"""

from __future__ import annotations
import csv, html, os, re
from pathlib import Path
from datetime import datetime, timezone
import base64
import sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPO_ROOT = Path(__file__).resolve().parents[1]
CONTENT_CSV = REPO_ROOT / "content" / "keywords.csv"
ART_DIR     = REPO_ROOT / "articles"

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
MODEL_ID = os.getenv("MODEL_ID", "gpt-4o-mini")  # –ø–æ–º–µ–Ω—è–π –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏

if not OPENAI_API_KEY:
    print("!! OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω (Secrets ‚Üí Actions).", file=sys.stderr)
    sys.exit(1)

# --- –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–ª–∏—Ç –¥–ª—è slug
_sub = {
    "–∞":"a","–±":"b","–≤":"v","–≥":"g","–¥":"d","–µ":"e","—ë":"e","–∂":"zh","–∑":"z","–∏":"i","–π":"y",
    "–∫":"k","–ª":"l","–º":"m","–Ω":"n","–æ":"o","–ø":"p","—Ä":"r","—Å":"s","—Ç":"t","—É":"u","—Ñ":"f",
    "—Ö":"h","—Ü":"c","—á":"ch","—à":"sh","—â":"sch","—ä":"","—ã":"y","—å":"","—ç":"e","—é":"yu","—è":"ya",
}
def slugify(s: str) -> str:
    s = s.strip().lower()
    out = []
    for ch in s:
        if "a"<=ch<="z" or "0"<=ch<="9":
            out.append(ch)
        elif ch in " _-‚Äì‚Äî.":
            out.append("-")
        else:
            out.append(_sub.get(ch, ""))
    slug = re.sub("-{2,}","-", "".join(out)).strip("-")
    return slug or "page"

# --- LLM (—á–µ—Ä–µ–∑ OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª–∏–µ–Ω—Ç)
import json, urllib.request

def openai_chat(messages, model=MODEL_ID, max_tokens=2000):
    url = "https://api.openai.com/v1/chat/completions"
    req = urllib.request.Request(url,
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
        },
        data=json.dumps({
            "model": model,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": max_tokens,
        }).encode("utf-8")
    )
    with urllib.request.urlopen(req, timeout=120) as r:
        j = json.loads(r.read().decode("utf-8"))
    return j["choices"][0]["message"]["content"]

STRUCTURE_PROMPT = """
–¢—ã –ø–∏—à–µ—à—å –ø—Ä–æ–¥–∞—é—â—É—é SEO-—Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π. –°—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —á–µ–∫-–ª–∏—Å—Ç–∞:

1) –í–≤–µ–¥–µ–Ω–∏–µ 120‚Äì150 —Å–ª–æ–≤: –≤–∫–ª—é—á–∏ —Ñ—Ä–∞–∑—É ¬´{primary_key}¬ª –≤ –ø–µ—Ä–≤–æ–º –∞–±–∑–∞—Ü–µ, –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ: –≤ –†–æ—Å—Å–∏–∏ –†–ö–ù –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã, VPN –ø–æ–º–æ–≥–∞–µ—Ç.
2) –†–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ (50‚Äì70 —Å–ª–æ–≤) —Å –ø—Ä–∏–∑—ã–≤–æ–º –∏ 2 –∫–Ω–æ–ø–∫–∞–º–∏: SAFENET –∏ –ù–æ—Ä–º VPN.
3) ¬´–ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç¬ª (150‚Äì180 —Å–ª–æ–≤): –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑ –∂–∞—Ä–≥–æ–Ω–∞.
4) –ö–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω (4‚Äì5 –ø—É–Ω–∫—Ç–æ–≤).
5) –ü–æ–¥—Ä–æ–±–Ω–æ ¬´–• —Å–ø–æ—Å–æ–±–æ–≤‚Ä¶¬ª (7‚Äì9 —Å–ø–æ—Å–æ–±–æ–≤; –∫–∞–∂–¥—ã–π 120‚Äì180 —Å–ª–æ–≤, —Å –ø–ª—é—Å–∞–º–∏/–º–∏–Ω—É—Å–∞–º–∏ –∏ —à–∞–≥–∞–º–∏).
6) –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (100‚Äì150 —Å–ª–æ–≤) ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏/¬´—É—Å–∫–æ—Ä–∏—Ç–µ–ª–∏¬ª –æ–ø–∞—Å–Ω—ã.
7) –ò—Ç–æ–≥ —Å CTA (120‚Äì150 —Å–ª–æ–≤).
8) FAQ: 6‚Äì8 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—Ç—ã –ø–æ 50‚Äì80 —Å–ª–æ–≤. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –ø—Ä–æ —É—Ç–µ—á–∫–∏: /articles/how-to-check-vpn-leaks.html

–ó–∞–ø—Ä–µ—Ç—ã: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ñ–æ—Å, –∂–∞—Ä–≥–æ–Ω, ¬´–Ω–∞ —Å—Ç–µ—Ä–æ–∏–¥–∞—Ö¬ª, ¬´–∫–∞–∫ —Ç–≤–æ–π –±—ã–≤—à–∏–π¬ª, –Ω–µ –±–æ–ª—å—à–µ 2 –º–µ—Ç–∞—Ñ–æ—Ä –∏ –Ω–µ –±–æ–ª–µ–µ 2 ¬´–Ω–µ X, –∞ Y¬ª.
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è <main> (–±–µ–∑ <html>/<head>/<body>). –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏:
- https://t.me/SafeNetVpn_bot?start=afrrica
- https://t.me/normwpn_bot?start=referral_228691787
–¢–µ–º–∞: {keyword}
H1: {h1}
"""

PAGE_TEMPLATE = """<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>{title} (<!--DAILY_DMY-->{dmy}<!--/DAILY_DMY-->)</title>
  <meta name="description" content="{desc}">
  <link rel="canonical" href="https://vpnhub-cyber.github.io/articles/{slug}.html">
  <link rel="icon" href="/favicon.png" type="image/png">

  <meta property="og:type" content="article">
  <meta property="og:title" content="{title} (<!--DAILY_DMY-->{dmy}<!--/DAILY_DMY-->)">
  <meta property="og:description" content="{desc}">
  <meta property="og:url" content="https://vpnhub-cyber.github.io/articles/{slug}.html">
  <meta property="og:image" content="https://vpnhub-cyber.github.io/og-image.png">
  <meta property="article:modified_time" content="<!--DAILY_ISO-->{iso}<!--/DAILY_ISO-->">
  <meta name="twitter:card" content="summary_large_image">

  <link href="https://fonts.googleapis.com/css2?family=Russo+One&family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    :root{{--card:#121836;--b:#2f3f7a;--t:#e6edff}}
    body{{margin:0;background:radial-gradient(ellipse at bottom,#1b2735 0%,#090a0f 100%);color:var(--t);font-family:'Montserrat',Arial,sans-serif}}
    a{{color:#7fc8ff}} header,main,footer{{max-width:880px;margin:0 auto;padding:16px}}
    h1{{font-family:'Russo One',Arial,sans-serif;color:#a0c7ff}}
    .meta{{color:#9fb7ff}}
    .card{{background:rgba(18,24,54,.92);border:1px solid var(--b);border-radius:16px;padding:14px;margin:14px 0}}
  </style>

  <!-- Yandex.Metrika -->
  <script type="text/javascript">
    (function(m,e,t,r,i,k,a){{m[i]=m[i]||function(){{(m[i].a=m[i].a||[]).push(arguments)}};m[i].l=1*new Date();
      for (var j=0;j<document.scripts.length;j++){{if (document.scripts[j].src===r){{return;}}}}
      k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)}})
      (window, document,'script','https://mc.yandex.ru/metrika/tag.js?id=103602117', 'ym');
    ym(103602117, 'init', {{ssr:true, webvisor:true, clickmap:true, ecommerce:"dataLayer", accurateTrackBounce:true, trackLinks:true}});
  </script>
  <noscript><div><img src="https://mc.yandex.ru/watch/103602117" style="position:absolute;left:-9999px;" alt=""></div></noscript>
</head>
<body>
  <header>
    <nav class="meta"><a href="/">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a> ¬∑ <a href="/all-articles.html">–í—Å–µ —Å—Ç–∞—Ç—å–∏</a></nav>
    <h1>{h1} (<!--DAILY_DMY-->{dmy}<!--/DAILY_DMY-->)</h1>
    <div class="meta">–û–±–Ω–æ–≤–ª–µ–Ω–æ: <!--DAILY_DMY-->{dmy}<!--/DAILY_DMY--></div>
  </header>

  <main>
{body}
    <section class="card">
      <h2>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
      <ul>
        <li><a href="/articles/vpn-bypass-blocks-2025.html">–û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ DPI</a></li>
        <li><a href="/articles/vpn-for-smartphone-2025.html">VPN –¥–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞</a></li>
        <li><a href="/articles/vpn-slow-speed-fix.html">–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å VPN ‚Äî –∫–∞–∫ —É—Å–∫–æ—Ä–∏—Ç—å</a></li>
        <li><a href="/articles/how-to-check-vpn-leaks.html">–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫ IP/DNS/WebRTC</a></li>
      </ul>
    </section>
    <div class="card">–¢–µ–≥–∏: {tags} ¬∑ —Å–µ–≥–æ–¥–Ω—è <!--DAILY_DMY-->{dmy}<!--/DAILY_DMY--></div>
  </main>

  <footer>
    <div class="meta">¬© 2025 VPNhub-Cyber ¬∑ –°–≤—è–∑—å: <a href="mailto:admin@vpnhub-cyber.ru">admin@vpnhub-cyber.ru</a></div>
  </footer>
</body>
</html>
"""

def render_page(keyword: str, h1: str, primary_key: str, slug: str, tags: str) -> str:
    dmy = datetime.now().strftime("%d.%m.%Y")
    iso = datetime.now(timezone.utc).replace(microsecond=0).isoformat().replace("+00:00","Z")
    title = h1 or keyword
    desc = f"{keyword}: –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Å–µ—Ç—å, DNS, VPN (—Å–∫—Ä—ã—Ç—ã–π —Ä–µ–∂–∏–º), –∫—ç—à –∏ –±—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    # –∑–∞–ø—Ä–æ—Å–∏–º —É LLM —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ <main>
    prompt = STRUCTURE_PROMPT.format(keyword=keyword, h1=h1 or keyword, primary_key=primary_key or keyword)
    body = openai_chat([
        {"role":"system","content":"–¢—ã –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Ç–µ—Ö—Ä–µ–¥–∞–∫—Ç–æ—Ä. –ü–∏—à–µ—à—å —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
        {"role":"user","content":prompt}
    ], model=MODEL_ID, max_tokens=3000)

    return PAGE_TEMPLATE.format(
        title=html.escape(title),
        desc=html.escape(desc),
        h1=html.escape(h1 or title),
        slug=slug,
        dmy=dmy,
        iso=iso,
        body=body,
        tags=html.escape(tags or keyword)
    )

def main():
    ART_DIR.mkdir(parents=True, exist_ok=True)
    with open(CONTENT_CSV, "r", encoding="utf-8") as f:
        rows = list(csv.DictReader(f))
    changed = 0
    for r in rows:
        if not (r.get("publish","").lower().startswith("y")):
            continue
        kw  = (r.get("keyword") or "").strip()
        if not kw: 
            continue
        h1  = (r.get("h1") or kw).strip()
        pk  = (r.get("primary_key") or kw).strip()
        slug = (r.get("slug") or slugify(kw)).strip()
        force = r.get("force","").lower().startswith("y")
        tags = (r.get("tags") or kw).strip()

        out = ART_DIR / f"{slug}.html"
        if out.exists() and not force:
            print(f"skip exists: {out.name}")
            continue

        html_page = render_page(kw, h1, pk, slug, tags)
        out.write_text(html_page, encoding="utf-8")
        print("written:", out.name)
        changed += 1

    print(f"Generated/updated: {changed} file(s).")

if __name__ == "__main__":
    main()
